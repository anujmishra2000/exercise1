Follow the steps :

1) Create a repository

$ git init


2)Make some changes -- add some files, change content of some files

$ touch index.html
$ touch city.html
//Made changes in files
$ git add -A

3)commit changes

$ git status
$ git commit -m "1st commit"

4)repeat steps 1-3 for 2 more times. try to remove and ignore some files . Use git diff before each commit.

$ touch .gitignore
$ touch logs.txt
$ touch states.txt
//placed logs.txt in .gitignore
//made changes in all other files
$ git status//in this logs.txt was not there
$ git diff  //confirming changes between modified and unmodified files
$ git add -A
$ git commit -m "Ignored logs.txt file"
//again made changes
$ rm states.txt  //removed states.txt
$ ls  //confirming file is removed
//modifying files again
$ git diff
$ git add .
$ git commit -m "Modified files and removed states.txt"


5)create changes and revert those changes using git when those changes are not added to staging are

//changes made in index.html
$ git checkout index.html
$ git status //confirming all changes ae reverted


6)create changes and revert those changes after adding changes to staging area

//changes made in index.html
$ git add -A
$ git reset index.html  //Staged to modified 
$ git checkout index.html
$ git status //confirming all changes ae reverted

7)create change and revert those changes after committing those changes .

//changes made in index.html
$ git commit -am "reverting files after commit"
$ git reset HEAD~
$ git checkout index.html
$ git status //confirming all changes ae reverted

8)Check repository status before adding changes to staging area, after adding changes to staging area and after committing changes .

$ git status

9)Display all the commits .

$ git log

10)Display a specific commit .

$ git show 96d8992

11)create branches called "feature1" and "feature2" from master. 11 . Delete branch "feature2".

$ git branch feature1
$ git branch feature2
$ git branch -d feature2

12)Make some commits on "feature1".

$ git checkout feature1
//changes done in files
$ git commit -am "changes in feature1 branch"
//changes done in files
$ git commit -am "changes in feature1 branch"

13)Make some commits on branch "master".

$ git checkout master
//changes done in files
$ git commit -am "changes in master branch"
//changes done in files
$ git commit -am "changes in master branch"

14)merge branch "feature1" in "master" (make some conflicts by changing same file on same line in both the branches) 

$ git merge feature1
//handled conflicts manually
$ git commit -am "Merging feature1"

15.create branch "feature2" from master .

$ git branch feature2
$ git checkout feature2

15)Make some commits on "feature2".

//modified files
$ git commit -am "changes in feature2 branch"
//modified files
$ git commit -am "changes in feature2 branch"

16)Make some commits on branch "master".

$ git checkout master
//modified files
$ git commit -am "changes in master branch"
//modified files
$ git commit -am "changes in master branch"

17)rebase branch "master" in "feature2" (make some conflicts by changing same file on same line in both the branches) .

$ git checkout feature2
$ git rebase master
//resolving conflicts manually
$ git commit -am "rebasing"
$ git rebase --continue

18)find the differences between "merge" and "rebase" in above cases.
->With respect to above cases , we can see that rebasing master in feature2 make master 2 commits behind feature1.
  And, merging feature1 in master make master 3 commits ahead of feature1

Another differences between rebase and merge are as follows-
1) Rebase eliminates the unnecessary merge commits required by git merge
2) Rebase has perfectly linear project history


19)Use git stash

//modified files
$ git stash //back to unmodified files to fix bug or some other important update and save modified data on clipboard
//After work is done 
$ git stash apply  // to get work back we were working on



20)create a repository on github for your working repository and push changes on remote repository.

$ git remote add origin https://github.com/anujmishra2000/exercise1.git
$ git push origin master
$ git push origin feature1
$ git push origin feature2